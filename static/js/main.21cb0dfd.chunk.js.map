{"version":3,"sources":["logo.svg","serviceWorker.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","App","className","src","logo","alt","href","target","rel","timerCollectionName","ReactDOM","render","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initPerformance","traceId","fallback","props","console","log","Button","variant","size","onClick","firebase","auth","getRedirectResult","then","result","credential","accessToken","user","provider","GoogleAuthProvider","addScope","signInWithRedirect","icon","faGoogle","ref","useFirebaseApp","firestore","collection","timerRef","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,gKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oFCOSC,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCmBFC,EAAsB,mBAwC5BC,IAASC,OACL,kBAAC,IAAD,CAAqBC,eApDF,CACnBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBA4CsCC,iBAAe,GAChE,kBAAC,IAAD,CAAkBC,QAAS,oBAAqBC,SAAU,yDACtD,kBAAC,IAAD,CAAWA,SAAU,mBA7BjC,SAAeC,GAgBX,OAfAC,QAAQC,IAAIF,GAgBR,kBAACG,EAAA,EAAD,CAAQC,QAAQ,QAAQC,KAAK,KAAK3B,UAAU,UAAU4B,QAf/C,WACPC,IAASC,OAAOC,oBAAoBC,MAAK,SAACC,GAElCA,EAAOC,YACCD,EAAOC,WAAWC,YAEnBF,EAAOG,QAEtB,IAAIC,EAAW,IAAIR,IAASC,KAAKQ,mBACjCD,EAASE,SAAS,WAClBF,EAASE,SAAS,SAClBV,IAASC,OAAOU,mBAAmBH,KAK/B,kBAAC,IAAD,CAAiBI,KAAMC,SAWF,OACjB,mBA1ChB,SAAyBpB,GAErBC,QAAQC,IAAI,2BAEZ,IACMmB,EADcC,cACIC,YAAYC,WAAWvC,GAE/C,OACI,kBAAC,EAAD,CAAKwC,SAAUJ,MAkCP,SAKZK,SAASC,eAAe,SFiDtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.21cb0dfd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {\r\n    FirebaseAppProvider,\r\n    AuthCheck,\r\n    SuspenseWithPerf, useFirebaseApp\r\n} from 'reactfire';\r\nimport 'firebase/performance';\r\nimport firebase from 'firebase';\r\n// Bootstrap\r\nimport { Button } from \"react-bootstrap\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGoogle } from \"@fortawesome/free-brands-svg-icons\";\r\n\r\n// import Home from './home/home';\r\nimport App from './App';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyASE_m6wDIaaXit-Wh-jWXOobBjBgEjEsg\",\r\n    authDomain: \"nutab-jorge.firebaseapp.com\",\r\n    databaseURL: \"https://nutab-jorge.firebaseio.com\",\r\n    projectId: \"nutab-jorge\",\r\n    storageBucket: \"nutab-jorge.appspot.com\",\r\n    messagingSenderId: \"723291823243\",\r\n    appId: \"1:723291823243:web:b55fcac31bf162b75ec88e\",\r\n    measurementId: \"G-BXB4HB9692\"\r\n};\r\n\r\nconst timerCollectionName = 'countdown-timers';\r\n\r\nfunction UseCallFirebase(props) {\r\n\r\n    console.log(\"UseCallFirebase called!\");\r\n\r\n    const firebaseApp = useFirebaseApp();\r\n    const ref = firebaseApp.firestore().collection(timerCollectionName);\r\n\r\n    return (\r\n        <App timerRef={ref}/>\r\n    );\r\n}\r\n\r\nfunction Login(props) {\r\n    console.log(props);\r\n    let auth = () => {\r\n        firebase.auth().getRedirectResult().then((result) => {\r\n            let token = null;\r\n            if (result.credential) {\r\n                token = result.credential.accessToken;\r\n            }\r\n            let user = result.user;\r\n        });\r\n        let provider = new firebase.auth.GoogleAuthProvider();\r\n        provider.addScope('profile');\r\n        provider.addScope('email');\r\n        firebase.auth().signInWithRedirect(provider);\r\n    };\r\n\r\n    return (\r\n        <Button variant=\"light\" size=\"lg\" className=\"buttons\" onClick={auth}>\r\n            <FontAwesomeIcon icon={faGoogle}/>\r\n        </Button>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <FirebaseAppProvider firebaseConfig={firebaseConfig} initPerformance>\r\n        <SuspenseWithPerf traceId={'load-login-status'} fallback={<p>Loading Login Status ....</p>}>\r\n            <AuthCheck fallback={<Login/>}>\r\n                <UseCallFirebase/>\r\n            </AuthCheck>\r\n        </SuspenseWithPerf>\r\n    </FirebaseAppProvider>\r\n    ,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}